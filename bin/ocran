#!/usr/bin/env ruby
# -*- ruby -*-
# encoding: UTF-8
require "pathname"

module Ocran
  # The Pathname class in Ruby is modified to handle mixed path separators and
  # to be case-insensitive.
  module RefinePathname
    NORMALIZE_FILE_SEPARATOR = if File::ALT_SEPARATOR
                                 proc { |s| s.tr(File::ALT_SEPARATOR, File::SEPARATOR) }
                               else
                                 proc { |s| s }
                               end
    private_constant :NORMALIZE_FILE_SEPARATOR

    # Compares two paths for equality based on the case sensitivity of the
    # Ruby execution environment's file system.
    # If the file system is case-insensitive, it performs a case-insensitive
    # comparison. Otherwise, it performs a case-sensitive comparison.
    def pathequal(a, b)
      if File::FNM_SYSCASE.nonzero?
        a.casecmp(b) == 0
      else
        a == b
      end
    end
    private :pathequal

    def to_posix
      NORMALIZE_FILE_SEPARATOR[to_s]
    end

    # Checks if two Pathname objects are equal, considering the file system's
    # case sensitivity and path separators. Returns false if the other object is not
    # an Pathname.
    # This method enables the use of the `uniq` method on arrays of Pathname objects.
    def eql?(other)
      return false unless other.is_a?(Pathname)

      a = NORMALIZE_FILE_SEPARATOR[to_s]
      b = NORMALIZE_FILE_SEPARATOR[other.to_s]
      pathequal(a, b)
    end

    alias == eql?
    alias === eql?

    # Checks if the current path is a sub path of the specified base_directory.
    # Both paths must be either absolute paths or relative paths; otherwise, this
    # method returns false.
    def subpath?(base_directory)
      s = relative_path_from(base_directory).each_filename.first
      s != '.' && s != ".."
    rescue ArgumentError
      false
    end

    # Appends the given suffix to the filename, preserving the file extension.
    # If the filename has an extension, the suffix is inserted before the extension.
    # If the filename does not have an extension, the suffix is appended to the end.
    # This method handles both directory and file paths correctly.
    #
    # Examples:
    #   pathname = Pathname("path.to/foo.tar.gz")
    #   pathname.append_to_filename("_bar") # => #<Pathname:path.to/foo_bar.tar.gz>
    #
    #   pathname = Pathname("path.to/foo")
    #   pathname.append_to_filename("_bar") # => #<Pathname:path.to/foo_bar>
    #
    def append_to_filename(suffix)
      sub(/(.*?#{Pathname::SEPARATOR_PAT})?(\.?[^.]+)?(\..*)?\z/, "\\1\\2#{suffix}\\3")
    end

    # Checks if the file's extension matches the expected extension.
    # The comparison is case-insensitive.
    # Example usage: ocran_pathname.extname?(".exe")
    def extname?(expected_ext)
      extname.casecmp(expected_ext) == 0
    end
  end

  IGNORE_MODULE_NAMES = /\A(enumerator.so|rational.so|complex.so|fiber.so|thread.rb|ruby2_keywords.rb)\z/

  GEM_SCRIPT_RE = /\.rbw?$/
  GEM_EXTRA_RE = %r{(
    # Auxiliary files in the root of the gem
    ^(\.\/)?(History|Install|Manifest|README|CHANGES|Licen[sc]e|Contributors|ChangeLog|BSD|GPL).*$ |
    # Installation files in the root of the gem
    ^(\.\/)?(Rakefile|setup.rb|extconf.rb)$ |
    # Documentation/test directories in the root of the gem
    ^(\.\/)?(doc|ext|examples|test|tests|benchmarks|spec)\/ |
    # Directories anywhere
    (^|\/)(\.autotest|\.svn|\.cvs|\.git)(\/|$) |
    # Unlikely extensions
    \.(rdoc|c|cpp|c\+\+|cxx|h|hxx|hpp|obj|o|a)$
  )}xi

  GEM_NON_FILE_RE = /(#{GEM_EXTRA_RE}|#{GEM_SCRIPT_RE})/

  # Alias for the temporary directory where files are extracted.
  TEMPDIR_ROOT = Pathname.new("|")
  # Directory for source files in temporary directory.
  SRCDIR = Pathname.new("src")
  # Directory for Ruby binaries in temporary directory.
  BINDIR = Pathname.new("bin")
  # Directory for GEMHOME files in temporary directory.
  GEMHOMEDIR = Pathname.new("gemhome")

  IGNORE_MODULES = []

  @options = {
    :lzma_mode => true,
    :extra_dlls => [],
    :files => [],
    :run_script => true,
    :add_all_core => false,
    :output_override => nil,
    :load_autoload => true,
    :chdir_first => false,
    :force_windows => false,
    :force_console => false,
    :icon_filename => nil,
    :rubyopt => nil,
    :gemfile => nil,
    :inno_script => nil,
    :quiet => false,
    :verbose => false,
    :autodll => true,
    :show_warnings => true,
    :debug => false,
    :debug_extract => false,
    :arg => [],
    :enc => true,
    :gem => [],
  }

  @options.each_key { |opt| eval("def self.#{opt}; @options[:#{opt}]; end") }

  def Ocran.msg(s)
    puts "=== #{s}" unless Ocran.quiet
  end

  def Ocran.verbose_msg(s)
    puts s if Ocran.verbose and not Ocran.quiet
  end

  def Ocran.warn(s)
    msg "WARNING: #{s}" if Ocran.show_warnings
  end

  def Ocran.fatal_error(s)
    puts "ERROR: #{s}"
    exit 1
  end

  def Ocran.save_environment
    @load_path_before = $LOAD_PATH.dup
    @pwd_before = Dir.pwd
    @env_before = ENV.to_hash
  end

  def Ocran.restore_environment
    ENV.clear.update(@env_before)
    Dir.chdir @pwd_before
  end

  def Ocran.parseargs(argv)
    usage = <<EOF
ocran [options] script.rb

Ocran options:

--help             Display this information.
--quiet            Suppress output while building executable.
--verbose          Show extra output while building executable.
--version          Display version number and exit.

Packaging options:

--dll dllname      Include additional DLLs from the Ruby bindir.
--add-all-core     Add all core ruby libraries to the executable.
--gemfile <file>   Add all gems and dependencies listed in a Bundler Gemfile.
--no-enc           Exclude encoding support files

Gem content detection modes:

--gem-minimal[=gem1,..]  Include only loaded scripts
--gem-guess=[gem1,...]   Include loaded scripts & best guess (DEFAULT)
--gem-all[=gem1,..]      Include all scripts & files
--gem-full[=gem1,..]     Include EVERYTHING
--gem-spec[=gem1,..]     Include files in gemspec (Does not work with Rubygems 1.7+)

  minimal: loaded scripts
  guess: loaded scripts and other files
  all: loaded scripts, other scripts, other files (except extras)
  full: Everything found in the gem directory

--[no-]gem-scripts[=..]  Other script files than those loaded
--[no-]gem-files[=..]    Other files (e.g. data files)
--[no-]gem-extras[=..]   Extra files (README, etc.)

  scripts: .rb/.rbw files
  extras: C/C++ sources, object files, test, spec, README
  files: all other files

Auto-detection options:

--no-dep-run       Don't run script.rb to check for dependencies.
--no-autoload      Don't load/include script.rb's autoloads.
--no-autodll       Disable detection of runtime DLL dependencies.

Output options:

--output <file>    Name the exe to generate. Defaults to ./<scriptname>.exe.
--no-lzma          Disable LZMA compression of the executable.
--innosetup <file> Use given Inno Setup script (.iss) to create an installer.

Executable options:

--windows          Force Windows application (rubyw.exe)
--console          Force console application (ruby.exe)
--chdir-first      When exe starts, change working directory to app dir.
--icon <ico>       Replace icon with a custom one.
--rubyopt <str>    Set the RUBYOPT environment variable when running the executable
--debug            Executable will be verbose.
--debug-extract    Executable will unpack to local dir and not delete after.
EOF

    while arg = argv.shift
      case arg
      when /\A--(no-)?lzma\z/
        @options[:lzma_mode] = !$1
      when /\A--no-dep-run\z/
        @options[:run_script] = false
      when /\A--add-all-core\z/
        @options[:add_all_core] = true
      when /\A--output\z/
        path = argv.shift
        @options[:output_override] = Pathname.new(path) if path
      when /\A--dll\z/
        path = argv.shift
        @options[:extra_dlls] << path if path
      when /\A--quiet\z/
        @options[:quiet] = true
      when /\A--verbose\z/
        @options[:verbose] = true
      when /\A--windows\z/
        @options[:force_windows] = true
      when /\A--console\z/
        @options[:force_console] = true
      when /\A--no-autoload\z/
        @options[:load_autoload] = false
      when /\A--chdir-first\z/
        @options[:chdir_first] = true
      when /\A--icon\z/
        path = argv.shift
        Ocran.fatal_error "Icon file #{path} not found.\n" unless path && File.exist?(path)
        @options[:icon_filename] = Pathname.new(path)
      when /\A--rubyopt\z/
        @options[:rubyopt] = argv.shift
      when /\A--gemfile\z/
        path = argv.shift
        Ocran.fatal_error "Gemfile #{path} not found.\n" unless path && File.exist?(path)
        @options[:gemfile] = Pathname.new(path)
      when /\A--innosetup\z/
        path = argv.shift
        Ocran.fatal_error "Inno Script #{path} not found.\n" unless path && File.exist?(path)
        @options[:inno_script] = Pathname.new(path)
      when /\A--no-autodll\z/
        @options[:autodll] = false
      when /\A--version\z/
        require_relative "../lib/ocran/version"
        puts "Ocran #{VERSION}"
        exit 0
      when /\A--no-warnings\z/
        @options[:show_warnings] = false
      when /\A--debug\z/
        @options[:debug] = true
      when /\A--debug-extract\z/
        @options[:debug_extract] = true
      when /\A--\z/
        @options[:arg] = ARGV.dup
        ARGV.clear
      when /\A--(no-)?enc\z/
        @options[:enc] = !$1
      when /\A--(no-)?gem-(\w+)(?:=(.*))?$/
        negate, group, list = $1, $2, $3
        @options[:gem] << [negate, group.to_sym, list&.split(",")] if group
      when /\A--help\z/, /\A--./
        puts usage
        exit 0
      else
        if !File.exist?(arg)
          Ocran.fatal_error "#{arg} not found!"
        elsif File.directory?(arg)
          if Dir.empty?(arg)
            Ocran.fatal_error "#{arg} is empty!"
          end
          # If a directory is passed, we want all files under that directory
          @options[:files] += Pathname.glob("#{arg}/**/*").map(&:expand_path)
        else
          @options[:files] << Pathname.new(arg).expand_path
        end
      end
    end

    if Ocran.debug_extract && Ocran.inno_script
      Ocran.fatal_error "The --debug-extract option conflicts with use of Inno Setup"
    end

    if Ocran.lzma_mode && Ocran.inno_script
      Ocran.fatal_error "LZMA compression must be disabled (--no-lzma) when using Inno Setup"
    end

    if !Ocran.chdir_first && Ocran.inno_script
      Ocran.fatal_error "Chdir-first mode must be enabled (--chdir-first) when using Inno Setup"
    end

    if files.empty?
      puts usage
      exit 1
    end
  end

  def self.main_script
    Ocran.files.first
  end

  def self.output_executable
    @output_executable ||= if Ocran.output_override
                             Ocran.output_override
                           else
                             executable = Ocran.main_script
                             # If debug mode is enabled, append "-debug" to the filename
                             executable = executable.append_to_filename("-debug") if Ocran.debug
                             executable.basename.sub_ext(".exe")
                           end
  end

  def self.windowed?
    (Ocran.main_script.extname?(".rbw") || Ocran.force_windows) && !Ocran.force_console
  end

  def self.ruby_executable
    @ruby_executable ||= Ocran.windowed? ? rubyw_exe : ruby_exe
  end

  def Ocran.init(argv)
    save_environment
    parseargs(argv)
    IGNORE_MODULES.push(*ObjectSpace.each_object(Module).to_a)
  end

  # Force loading autoloaded constants. Searches through all modules
  # (and hence classes), and checks their constants for autoloaded
  # ones, then attempts to load them.
  def Ocran.attempt_load_autoload
    checked_modules = IGNORE_MODULES.inject({}) { |h, mod| h[mod] = true; h }
    loop do
      modules_count = ObjectSpace.each_object(Module).count do |mod|
        next if checked_modules.include?(mod)
        mod.constants.each do |const|
          next unless mod.autoload?(const)
          Ocran.msg "Attempting to trigger autoload of #{mod}::#{const}"
          begin
            mod.const_get(const)
          rescue NameError
            Ocran.warn "#{mod}::#{const} was defined autoloadable, but caused NameError"
          rescue LoadError
            Ocran.warn "#{mod}::#{const} was not loadable"
          end
        end
        checked_modules[mod] = true
      end
      break if modules_count == 0
    end
  end

  # Guess the load path (from 'paths') that was used to load
  # 'feature'. This is primarily relevant on Ruby 1.8 which stores
  # "unqualified" paths in $LOADED_FEATURES. In Ruby 1.9 and later,
  # $LOADED_FEATURES contains fully qualified paths, so this method
  # is less critical but still applicable for backward compatibility.
  def Ocran.find_load_path(loadpaths, feature)
    if feature.absolute?
      # For an absolute path feature, find the loadpath that contains the feature
      # and determine the shortest possible require-path (most specific path).
      loadpaths.select { |loadpath| feature.subpath?(loadpath.expand_path) }
               .min_by { |loadpath| feature.relative_path_from(loadpath.expand_path).to_s.size }
    else
      # For a relative path feature, find the loadpath where the expanded feature exists
      # and select the longest loadpath (most specific path).
      loadpaths.select { |loadpath| feature.expand_path(loadpath).exist? }
               .max_by { |loadpath| loadpath.to_s.size }
    end
  end

  # Find the root of all files specified on the command line and use
  # it as the "src" of the output.
  def Ocran.find_src_root(files)
    src_files = files.map { |file| file.expand_path }
    src_prefix = src_files.inject(src_files.first.dirname) do |srcroot, path|
      if path.subpath?(exec_prefix)
        srcroot
      else
        srcroot.ascend.find do |current_srcroot|
          relpath = path.relative_path_from(current_srcroot)
        rescue ArgumentError
          Ocran.fatal_error "No common directory contains all specified files"
        else
          relpath.each_filename.first != ".."
        end
      end
    end
    src_files = src_files.map do |file|
      if file.subpath?(src_prefix)
        file.relative_path_from(src_prefix)
      else
        file
      end
    end
    return src_prefix, src_files
  end

  def self.gem_inclusion_set(spec_name)
    include = [:loaded, :files]
    Ocran.gem.each do |negate, option, list|
      next unless list.nil? || list.include?(spec_name)

      case option
      when :minimal
        include = [:loaded]
      when :guess
        include = [:loaded, :files]
      when :all
        include = [:scripts, :files]
      when :full
        include = [:scripts, :files, :extras]
      when :spec
        include = [:spec]
      when :scripts, :files, :extras
        if negate
          include.delete(option)
        else
          include.push(option)
        end
      else
        Ocran.fatal "Invalid Gem content detection option: #{option}"
      end
    end
    include.uniq!
    include
  end

  # Searches for features that are loaded from gems, then produces a
  # list of files included in those gems' manifests. Also returns a
  # list of original features that are caused gems to be
  # included. Ruby 1.8 provides Gem.loaded_specs to detect gems, but
  # this is empty with Ruby 1.9. So instead, we look for any loaded
  # file from a gem path.
  def Ocran.find_gem_files(features)
    features_from_gems = []
    gems = {}

    # If a Bundler Gemfile was provided, add all gems it specifies
    if Ocran.gemfile
      Ocran.msg "Scanning Gemfile"
      # Load Rubygems and Bundler so we can scan the Gemfile
      ["rubygems", "bundler"].each do |lib|
        begin
          require lib
        rescue LoadError
          Ocran.fatal_error "Couldn't scan Gemfile, unable to load #{lib}"
        end
      end

      ENV["BUNDLE_GEMFILE"] = Ocran.gemfile.to_s
      Bundler.load.specs.each do |spec|
        Ocran.verbose_msg "From Gemfile, adding gem #{spec.full_name}"
        gems[spec.name] ||= spec
      end

      # Since Ruby 3.0 and later, the minimum version of Bundler is 2.0.0,
      # which ensures that Bundler itself will always be included.
    end

    if defined?(Gem)
      # Include Gems that are loaded
      Gem.loaded_specs.each { |gemname, spec| gems[gemname] ||= spec }
      # Fall back to gem detection (loaded_specs are not population on
      # all Ruby versions)
      features.each do |feature|
        # Detect load path unless absolute
        if not feature.absolute?
          feature = find_load_path($LOAD_PATH.map { |path| Pathname(path) }, feature)
          next if feature.nil? # Could be enumerator.so
        end
        # Skip if found in known Gem dir
        if gems.find { |gem, spec| feature.subpath?(spec.gem_dir) }
          features_from_gems << feature
          next
        end
        Gem.path.each do |gempath|
          geminstallpath = Pathname(gempath) / "gems"
          if feature.subpath?(geminstallpath)
            gemlocalpath = feature.relative_path_from(geminstallpath)
            fullgemname = gemlocalpath.to_s.split(Pathname::SEPARATOR_PAT).first
            gemspecpath = Pathname(gempath) / "specifications" / "#{fullgemname}.gemspec"
            if spec = Gem::Specification.load(gemspecpath.to_s)
              gems[spec.name] ||= spec
              features_from_gems << feature
            else
              Ocran.warn "Failed to load gemspec for '#{fullgemname}'"
            end
          end
        end
      end

      gem_files = []

      gems.each do |gemname, spec|
        if File.exist?(spec.spec_file) then
          @gemspecs << Pathname(spec.spec_file)
        else
          spec_name = File.basename(spec.spec_file)
          spec_path = File.dirname(spec.spec_file)
          default_spec_file = spec_path + "/default/" + spec_name
          if File.exist?(default_spec_file) then
            @gemspecs << Pathname(default_spec_file)
            Ocran.msg "Using default specification #{default_spec_file} for gem #{spec.full_name}"
          end 
        end

        # Determine which set of files to include for this particular gem
        include = Ocran.gem_inclusion_set(spec.name)
        Ocran.msg "Detected gem #{spec.full_name} (#{include.join(", ")})"

        gem_root = Pathname(spec.gem_dir)
        unless gem_root.directory?
          Ocran.warn "Gem #{spec.full_name} root folder was not found, skipping"
          next
        end

        gem_extension = (gem_root / ".." / ".." / "extensions").expand_path
        if gem_extension.exist?
          build_complete = gem_extension.find.select { |pn| pn.file? && pn.basename.to_s == "gem.build_complete" && pn.dirname.basename.to_s == spec.full_name }
        else
          build_complete = nil
        end

        # Find the selected files
        gem_root_files = unless (include & [:files, :extras, :scripts]).empty?
                           gem_root.find.select(&:file?)
                         end
        files = include.map do |set|
          case set
          when :spec
            spec.files.map { |file| Pathname(file) }
          when :loaded
            features_from_gems.select { |feature| feature.subpath?(gem_root) }
          when :files
            selected_files = gem_root_files.select { |path| path.relative_path_from(gem_root).to_posix !~ GEM_NON_FILE_RE }
            if build_complete
              selected_files << build_complete
            end
            selected_files
          when :extras
            gem_root_files.select { |path| path.relative_path_from(gem_root).to_posix =~ GEM_EXTRA_RE }
          when :scripts
            gem_root_files.select { |path| path.extname =~ GEM_SCRIPT_RE }
          else
            raise "Invalid file set: #{set}. Please specify a valid file set (:spec, :loaded, :files, :extras, :scripts)."
          end
        end

        files.flatten!
        actual_files = files.select { |file| file.file? }

        (files - actual_files).each do |missing_file|
          Ocran.warn "#{missing_file} was not found"
        end

        total_size = actual_files.sum(0, &:size)
        Ocran.msg "\t#{actual_files.size} files, #{total_size} bytes"

        gem_files += actual_files
      end
      gem_files.uniq!
    else
      gem_files = []
    end
    features_from_gems -= gem_files
    return gem_files, features_from_gems
  end

  # For RubyInstaller environments supporting Ruby 2.4 and above,
  # this method checks for the existence of a required manifest file
  def self.ruby_builtin_manifest
    manifest_path = exec_prefix / "bin/ruby_builtin_dlls/ruby_builtin_dlls.manifest"
    manifest_path.exist? ? manifest_path : nil
  end

  def Ocran.build_exe
    # The `RefinePathname` module is prepended to the `Pathname` class. This is done
    # after the user script has finished executing and only the Ocran code is running,
    # to avoid affecting the script environment.
    ::Pathname.prepend(RefinePathname)

    all_load_paths = $LOAD_PATH.map { |loadpath| Pathname(loadpath).expand_path }
    @added_load_paths = ($LOAD_PATH - @load_path_before).map { |loadpath| Pathname(loadpath).expand_path }
    working_directory = Pathname.pwd

    restore_environment

    # If the script was run and autoload is enabled, attempt to autoload libraries.
    if Ocran.run_script && Ocran.load_autoload
      attempt_load_autoload
    end

    # Store the currently loaded files (before we require rbconfig for
    # our own use).
    features = $LOADED_FEATURES.map { |feature| Pathname(feature) }
    
    # Since https://github.com/rubygems/rubygems/commit/cad4cf16cf8fcc637d9da643ef97cf0be2ed63cb
    # rubygems/core_ext/kernel_require.rb is evaled and thus missing in $LOADED_FEATURES, so we can't find it and need to add it manually
    features.push(Pathname("rubygems/core_ext/kernel_require.rb"))

    # Find gemspecs to include
    if defined?(Gem)
      # Since Bundler is integrated into RubyGems from Ruby 3.2 onwards,
      # Bundler's loaded_from points to the root directory of the bundler gem.
      # Here, we are only collecting gemspecs files.
      @gemspecs = Gem.loaded_specs.map { |name, info| Pathname(info.loaded_from) }.reject(&:directory?)
    else
      @gemspecs = []
    end

    require_relative "../lib/ocran/host_config_helper"
    Ocran.extend HostConfigHelper

    # Find gems files and remove them from features
    gem_files, features_from_gems = find_gem_files(features)
    features -= features_from_gems

    # Include encoding support files
    if Ocran.enc
      all_load_paths.each do |path|
        if path.subpath?(exec_prefix)
          encpath = path / "enc"
          if encpath.exist?
            encfiles = encpath.find.select { |pn| pn.file? && pn.extname?(".so") }
            Ocran.msg "Including #{encfiles.size} encoding support files (#{encfiles.sum(0, &:size)} bytes, use --no-enc to exclude)"
            features.push(*encfiles)
          end
        end
      end
    else
      Ocran.msg "Not including encoding support files"
    end

    # Find the source root and adjust paths
    src_prefix, src_files = find_src_root(Ocran.files)

    # Find features and decide where to put them in the temporary
    # directory layout.
    libs = []
    src_load_path = []
    instsitelibdir = sitelibdir.relative_path_from(exec_prefix)
    features.each do |feature|
      path = find_load_path(all_load_paths, feature)
      if path.nil? || path.expand_path == Pathname.pwd
        Ocran.files << feature
      else
        if feature.absolute?
          feature = feature.relative_path_from(path.expand_path)
        end
        fullpath = feature.expand_path(path)

        if fullpath.subpath?(exec_prefix)
          # Features found in the Ruby installation are put in the
          # temporary Ruby installation.
          libs << [fullpath, fullpath.relative_path_from(exec_prefix)]
        elsif defined?(Gem) and gemhome = Gem.path.find { |pth| fullpath.subpath?(pth) }
          # Features found in any other Gem path (e.g. ~/.gems) is put
          # in a special 'gemhome' folder.
          libs << [fullpath, GEMHOMEDIR / fullpath.relative_path_from(Pathname(gemhome))]
        elsif fullpath.subpath?(src_prefix) || path == working_directory
          # Any feature found inside the src_prefix automatically gets
          # added as a source file (to go in 'src').
          Ocran.files << fullpath
          # Add the load path unless it was added by the script while
          # running (or we assume that the script can also set it up
          # correctly when running from the resulting executable).
          src_load_path << path unless @added_load_paths.include?(path)
        elsif @added_load_paths.include?(path)
          # Any feature that exist in a load path added by the script
          # itself is added as a file to go into the 'src' (src_prefix
          # will be adjusted below to point to the common parent).
          Ocran.files << fullpath
        else
          # All other feature that can not be resolved go in the the
          # Ruby sitelibdir. This is automatically in the load path
          # when Ruby starts.
          libs << [fullpath, instsitelibdir / feature]
        end
      end
    end

    # Recompute the src_prefix. Files may have been added implicitly
    # while scanning through features.
    src_prefix, src_files = find_src_root(Ocran.files)
    Ocran.files.replace(src_files)

    # Add the load path that are required with the correct path after
    # src_prefix was adjusted.
    load_path = src_load_path.map { |loadpath| TEMPDIR_ROOT / SRCDIR / loadpath.relative_path_from(src_prefix) }

    # Decide where to put gem files, either the system gem folder, or
    # GEMHOME.
    gem_files.each do |gemfile|
      if gemfile.subpath?(exec_prefix)
        libs << [gemfile, gemfile.relative_path_from(exec_prefix)]
      elsif defined?(Gem) and gemhome = Gem.path.find { |pth| gemfile.subpath?(pth) }
        libs << [gemfile, GEMHOMEDIR / gemfile.relative_path_from(Pathname(gemhome))]
      else
        Ocran.fatal_error "Don't know where to put gemfile #{gemfile}"
      end
    end

    # If requested, add all ruby standard libraries
    if Ocran.add_all_core
      Ocran.msg "Will include all ruby core libraries"
      @load_path_before.each do |lp|
        path = Pathname.new(lp)
        next unless path.to_posix =~
                    /\/(ruby\/(?:site_ruby\/|vendor_ruby\/)?[0-9.]+)\/?$/i
        subdir = $1
        Pathname.glob("#{lp}/**/*").each do |fpath|
          next if fpath.directory?
          tgt = "lib/#{subdir}/#{fpath.relative_path_from(path)}"
          libs << [fpath, tgt]
        end
      end
    end

    Ocran.msg "Building #{Ocran.output_executable}"
    target_script = nil
    direction = proc do |sb|
      # Add explicitly mentioned files
      Ocran.msg "Adding user-supplied source files"
      Ocran.files.each do |file|
        file = src_prefix / file
        if file.subpath?(exec_prefix)
          target = file.relative_path_from(exec_prefix)
        elsif file.subpath?(src_prefix)
          target = SRCDIR / file.relative_path_from(src_prefix)
        else
          target = SRCDIR / file.basename
        end

        target_script ||= target

        if file.directory?
          sb.mkdir(target)
        elsif file.exist?
          sb.create_file(file, target)
        elsif file.basename.to_s =~ IGNORE_MODULE_NAMES
          next
        else
          Ocran.fatal_error "The file does not exist (#{file})"
        end
      end

      # Add the ruby executable and DLL
      Ocran.msg "Adding ruby executable #{Ocran.ruby_executable}"
      sb.create_file(bindir / Ocran.ruby_executable, BINDIR / Ocran.ruby_executable)
      if libruby_so
        sb.create_file(bindir / libruby_so, BINDIR / libruby_so)
      end

      # Add detected DLLs
      if Ocran.autodll
        Ocran.detect_dlls.each do |dll|
          Ocran.msg "Adding detected DLL #{dll}"
          if dll.subpath?(exec_prefix)
            sb.create_file(dll, dll.relative_path_from(exec_prefix))
          else
            sb.create_file(dll, BINDIR / File.basename(dll))
          end
        end
      end

      # Add external manifest files
      [Ocran.ruby_builtin_manifest].compact.each do |manifest|
        Ocran.msg "Adding external manifest #{manifest}"
        sb.create_file(manifest, manifest.relative_path_from(exec_prefix))
      end

      # Add extra DLLs specified on the command line
      Ocran.extra_dlls.each do |dll|
        Ocran.msg "Adding supplied DLL #{dll}"
        sb.create_file(bindir / dll, BINDIR / dll)
      end

      # Add gemspec files
      @gemspecs.uniq.each do |gemspec|
        if gemspec.subpath?(exec_prefix)
          sb.create_file(gemspec, gemspec.relative_path_from(exec_prefix))
        elsif defined?(Gem) and gemhome = Gem.path.find { |pth| gemspec.subpath?(pth) }
          sb.create_file(gemspec, GEMHOMEDIR / gemspec.relative_path_from(Pathname(gemhome)))
        else
          Ocran.fatal_error "Gem spec #{gemspec} does not exist in the Ruby installation. Don't know where to put it."
        end
      end

      # Add loaded libraries (features, gems)
      Ocran.msg "Adding library files"
      libs.each do |path, target|
        sb.create_file(path, target)
      end

      # Workaround: RubyInstaller cannot find the msys folder if ../msys64/usr/bin/msys-2.0.dll is not present (since RubyInstaller-2.4.1 rubyinstaller 2 issue 23)
      # Add an empty file to /msys64/usr/bin/msys-2.0.dll if the dll was not required otherwise
      unless sb.files.values.any? { |entry, _src| entry.to_s.include?("msys-2.0.dll") }
        sb.create_file(Pathname(File.dirname(__FILE__)) / "../share/ocran/empty-msys-2.0.dll", 'msys64/usr/bin/msys-2.0.dll')
      end

      # Set environment variable
      rubyopt = Ocran.rubyopt || ENV["RUBYOPT"] || ""

      # FIXME: Remove the absolute path to bundler/setup from RUBYOPT
      # This is a temporary measure to ensure compatibility with self-extracting executables
      # built in a bundle exec environment, particularly for Ruby 3.2 and later where
      # absolute paths are included in RUBYOPT.
      # In the future, we plan to implement a more appropriate solution.
      rubyopt = rubyopt.gsub(%r(-r#{Regexp.escape(RbConfig::TOPDIR)}(/.*/bundler/setup)), "")

      sb.setenv("RUBYOPT", rubyopt)
      sb.setenv("RUBYLIB", load_path.uniq.join(";"))
      sb.setenv("GEM_PATH", TEMPDIR_ROOT / GEMHOMEDIR)

      # Add the opcode to launch the script
      installed_ruby_exe = BINDIR / Ocran.ruby_executable
      sb.set_script(installed_ruby_exe, target_script, *Ocran.arg)
    end

    unless Ocran.inno_script
      require_relative "../lib/ocran/stub_builder"
      StubBuilder.new(Ocran.output_executable,
                      chdir_before: Ocran.chdir_first,
                      debug_extract: Ocran.debug_extract,
                      debug_mode: Ocran.debug,
                      enable_compression: Ocran.lzma_mode,
                      gui_mode: Ocran.windowed?,
                      icon_path: Ocran.icon_filename,
                      &direction)
      Ocran.msg "Finished building #{Ocran.output_executable} (#{Ocran.output_executable.size} bytes)"
    else
      require_relative "../lib/ocran/inno_setup_builder"
      InnoSetupBuilder.new(Ocran.output_executable,
                           Ocran.inno_script,
                           chdir_before: Ocran.chdir_first,
                           icon_path: Ocran.icon_filename,
                           &direction)
      Ocran.msg "Finished building installer file"
    end
  end

  def self.detect_dlls
    require_relative "../lib/ocran/library_detector"
    loaded = LibraryDetector.loaded_dlls
    loaded.map { |s| Pathname.new(s) }.select do |path|
      path.subpath?(exec_prefix) && path.extname?(".dll") && path.basename != libruby_so
    end
  end
end # module Ocran

if File.basename(__FILE__) == File.basename($0)
  Ocran.init(ARGV)
  ARGV.replace(Ocran.arg)

  unless Ocran.main_script.exist?
    Ocran.fatal_error "#{Ocran.main_script} was not found!"
  end

  at_exit do
    if $!.nil? or $!.kind_of?(SystemExit)
      Ocran.build_exe
      exit 0
    end
  end

  if Ocran.run_script
    Ocran.msg "Loading script to check dependencies"
    $0 = Ocran.main_script.to_s
    load Ocran.main_script
  end
end

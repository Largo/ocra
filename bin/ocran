#!/usr/bin/env ruby
# -*- ruby -*-
# encoding: UTF-8
require "pathname"

module Ocran
  # Match the load path against standard library, site_ruby, and vendor_ruby paths
  # This regular expression matches:
  # - /ruby/3.0.0/
  # - /ruby/site_ruby/3.0.0/
  # - /ruby/vendor_ruby/3.0.0/
  RUBY_LIBRARY_PATH_REGEX = %r{/(ruby/(?:site_ruby/|vendor_ruby/)?\d+\.\d+\.\d+)/?$}i

  # Alias for the temporary directory where files are extracted.
  TEMPDIR_ROOT = Pathname.new("|")
  # Directory for source files in temporary directory.
  SRCDIR = Pathname.new("src")
  # Directory for Ruby binaries in temporary directory.
  BINDIR = Pathname.new("bin")
  # Directory for GEMHOME files in temporary directory.
  GEMHOMEDIR = Pathname.new("gemhome")
  # Directory for Ruby library in temporary directory.
  LIBDIR = Pathname("lib")

  @ignore_modules = []

  @options = {
    :add_all_core? => false,
    :add_all_encoding? => true,
    :argv => [],
    :auto_detect_dlls? => true,
    :chdir_before? => false,
    :enable_compression? => true,
    :enable_debug_extract? => false,
    :enable_debug_mode? => false,
    :extra_dlls => [],
    :force_console? => false,
    :force_windows? => false,
    :gem_options => [],
    :gemfile => nil,
    :icon_filename => nil,
    :inno_setup_script => nil,
    :load_autoload? => true,
    :output_override => nil,
    :quiet? => false,
    :rubyopt => nil,
    :run_script? => true,
    :source_files => [],
    :verbose? => false,
    :warn? => true,
  }

  def self.add_all_core? = @options[__method__]

  def self.add_all_encoding? = @options[__method__]

  def self.argv = @options[__method__]

  def self.auto_detect_dlls? = @options[__method__]

  def self.chdir_before? = @options[__method__]

  def self.enable_compression? = @options[__method__]

  def self.enable_debug_extract? = @options[__method__]

  def self.enable_debug_mode? = @options[__method__]

  def self.extra_dlls = @options[__method__]

  def self.force_autoload? = run_script? && load_autoload?

  def self.force_console? = @options[__method__]

  def self.force_windows? = @options[__method__]

  def self.gem_options = @options[__method__]

  def self.gemfile = @options[__method__]

  def self.icon_filename = @options[__method__]

  def self.inno_setup_script = @options[__method__]

  def self.load_autoload? = @options[__method__]

  def self.output_override = @options[__method__]

  def self.quiet? = @options[__method__]

  def self.run_script? = @options[__method__]

  def self.source_files = @options[__method__]

  def self.use_inno_setup? = !!inno_setup_script

  def self.verbose? = !quiet? && @options[__method__]

  def self.warn? = @options[__method__]

  def Ocran.msg(s)
    puts "=== #{s}" unless Ocran.quiet?
  end

  def Ocran.verbose_msg(s)
    puts s if Ocran.verbose?
  end

  def Ocran.warn(s)
    msg "WARNING: #{s}" if Ocran.warn?
  end

  def Ocran.fatal_error(s)
    puts "ERROR: #{s}"
    exit 1
  end

  def Ocran.save_environment
    @load_path_before = $LOAD_PATH.dup
    @pwd_before = Dir.pwd
    @env_before = ENV.to_hash
  end

  def Ocran.restore_environment
    ENV.clear.update(@env_before)
    Dir.chdir @pwd_before
  end

  def self.usage
    <<EOF
ocran [options] script.rb

Ocran options:

--help             Display this information.
--quiet            Suppress output while building executable.
--verbose          Show extra output while building executable.
--version          Display version number and exit.

Packaging options:

--dll dllname      Include additional DLLs from the Ruby bindir.
--add-all-core     Add all core ruby libraries to the executable.
--gemfile <file>   Add all gems and dependencies listed in a Bundler Gemfile.
--no-enc           Exclude encoding support files

Gem content detection modes:

--gem-minimal[=gem1,..]  Include only loaded scripts
--gem-guess=[gem1,...]   Include loaded scripts & best guess (DEFAULT)
--gem-all[=gem1,..]      Include all scripts & files
--gem-full[=gem1,..]     Include EVERYTHING
--gem-spec[=gem1,..]     Include files in gemspec (Does not work with Rubygems 1.7+)

  minimal: loaded scripts
  guess: loaded scripts and other files
  all: loaded scripts, other scripts, other files (except extras)
  full: Everything found in the gem directory

--[no-]gem-scripts[=..]  Other script files than those loaded
--[no-]gem-files[=..]    Other files (e.g. data files)
--[no-]gem-extras[=..]   Extra files (README, etc.)

  scripts: .rb/.rbw files
  extras: C/C++ sources, object files, test, spec, README
  files: all other files

Auto-detection options:

--no-dep-run       Don't run script.rb to check for dependencies.
--no-autoload      Don't load/include script.rb's autoloads.
--no-autodll       Disable detection of runtime DLL dependencies.

Output options:

--output <file>    Name the exe to generate. Defaults to ./<scriptname>.exe.
--no-lzma          Disable LZMA compression of the executable.
--innosetup <file> Use given Inno Setup script (.iss) to create an installer.

Executable options:

--windows          Force Windows application (rubyw.exe)
--console          Force console application (ruby.exe)
--chdir-first      When exe starts, change working directory to app dir.
--icon <ico>       Replace icon with a custom one.
--rubyopt <str>    Set the RUBYOPT environment variable when running the executable
--debug            Executable will be verbose.
--debug-extract    Executable will unpack to local dir and not delete after.
EOF
  end

  def self.parse(argv)
    while (arg = argv.shift)
      case arg
      when /\A--(no-)?lzma\z/
        @options[:enable_compression?] = !$1
      when "--no-dep-run"
        @options[:run_script?] = false
      when "--add-all-core"
        @options[:add_all_core?] = true
      when "--output"
        path = argv.shift
        @options[:output_override] = Pathname.new(path) if path
      when "--dll"
        path = argv.shift
        @options[:extra_dlls] << path if path
      when "--quiet"
        @options[:quiet?] = true
      when "--verbose"
        @options[:verbose?] = true
      when "--windows"
        @options[:force_windows?] = true
      when "--console"
        @options[:force_console?] = true
      when "--no-autoload"
        @options[:load_autoload?] = false
      when "--chdir-first"
        @options[:chdir_before?] = true
      when "--icon"
        path = argv.shift
        Ocran.fatal_error "Icon file #{path} not found.\n" unless path && File.exist?(path)
        @options[:icon_filename] = Pathname.new(path)
      when "--rubyopt"
        @options[:rubyopt] = argv.shift
      when "--gemfile"
        path = argv.shift
        Ocran.fatal_error "Gemfile #{path} not found.\n" unless path && File.exist?(path)
        @options[:gemfile] = Pathname.new(path)
      when "--innosetup"
        path = argv.shift
        Ocran.fatal_error "Inno Script #{path} not found.\n" unless path && File.exist?(path)
        @options[:inno_setup_script] = Pathname.new(path)
      when "--no-autodll"
        @options[:auto_detect_dlls?] = false
      when "--version"
        require_relative "../lib/ocran/version"
        puts "Ocran #{VERSION}"
        exit 0
      when "--no-warnings"
        @options[:warn?] = false
      when "--debug"
        @options[:enable_debug_mode?] = true
      when "--debug-extract"
        @options[:enable_debug_extract?] = true
      when "--"
        @options[:argv] = ARGV.dup
        ARGV.clear
      when /\A--(no-)?enc\z/
        @options[:add_all_encoding?] = !$1
      when /\A--(no-)?gem-(\w+)(?:=(.*))?$/
        negate, group, list = $1, $2, $3
        @options[:gem_options] << [negate, group.to_sym, list&.split(",")] if group
      when "--help", /\A--./
        puts usage
        exit 0
      else
        if !File.exist?(arg)
          Ocran.fatal_error "#{arg} not found!"
        elsif File.directory?(arg)
          if Dir.empty?(arg)
            Ocran.fatal_error "#{arg} is empty!"
          end
          # If a directory is passed, we want all files under that directory
          @options[:source_files] += Pathname.glob("#{arg}/**/*").map(&:expand_path)
        else
          @options[:source_files] << Pathname.new(arg).expand_path
        end
      end
    end

    if Ocran.enable_debug_extract? && Ocran.use_inno_setup?
      Ocran.fatal_error "The --debug-extract option conflicts with use of Inno Setup"
    end

    if Ocran.enable_compression? && Ocran.use_inno_setup?
      Ocran.fatal_error "LZMA compression must be disabled (--no-lzma) when using Inno Setup"
    end

    if !Ocran.chdir_before? && Ocran.use_inno_setup?
      Ocran.fatal_error "Chdir-first mode must be enabled (--chdir-first) when using Inno Setup"
    end

    if Ocran.source_files.empty?
      puts usage
      exit 1
    end

    @options[:script] = source_files.first
  end

  def self.script = @options[:script]

  def self.output_executable
    @output_executable ||= if Ocran.output_override
                             Ocran.output_override
                           else
                             executable = Ocran.script
                             # If debug mode is enabled, append "-debug" to the filename
                             executable = executable.append_to_filename("-debug") if Ocran.enable_debug_mode?
                             executable.basename.sub_ext(".exe")
                           end
  end

  def self.windowed?
    (Ocran.script.extname?(".rbw") || Ocran.force_windows?) && !Ocran.force_console?
  end

  def self.ruby_executable
    @ruby_executable ||= Ocran.windowed? ? rubyw_exe : ruby_exe
  end

  def self.rubyopt
    @rubyopt ||= @options[:rubyopt] || ENV["RUBYOPT"] || ""
  end

  def Ocran.init
    save_environment
    parse(ARGV)
    ARGV.replace(Ocran.argv)
    @ignore_modules += ObjectSpace.each_object(Module).to_a
  end

  # Force loading autoloaded constants. Searches through all modules
  # (and hence classes), and checks their constants for autoloaded
  # ones, then attempts to load them.
  def self.attempt_load_autoload(ignore_modules = [])
    checked_modules = ignore_modules.inject({}) { |h, mod| h[mod] = true; h }
    loop do
      modules_count = ObjectSpace.each_object(Module).count do |mod|
        next if checked_modules.include?(mod)
        mod.constants.each do |const|
          next unless mod.autoload?(const)
          Ocran.msg "Attempting to trigger autoload of #{mod}::#{const}"
          begin
            mod.const_get(const)
          rescue NameError
            Ocran.warn "#{mod}::#{const} was defined autoloadable, but caused NameError"
          rescue LoadError
            Ocran.warn "#{mod}::#{const} was not loadable"
          end
        end
        checked_modules[mod] = true
      end
      break if modules_count == 0
    end
  end

  # Guess the load path (from 'paths') that was used to load
  # 'feature'. This is primarily relevant on Ruby 1.8 which stores
  # "unqualified" paths in $LOADED_FEATURES. In Ruby 1.9 and later,
  # $LOADED_FEATURES contains fully qualified paths, so this method
  # is less critical but still applicable for backward compatibility.
  def Ocran.find_load_path(loadpaths, feature)
    if feature.absolute?
      # For an absolute path feature, find the load path that contains the feature
      # and determine the shortest possible require-path (most specific path).
      loadpaths.select { |load_path| feature.subpath?(File.expand_path(load_path)) }
               .min_by { |load_path| feature.relative_path_from(File.expand_path(load_path)).to_s.size }
    else
      # For a relative path feature, find the load path where the expanded feature exists
      # and select the longest load path (most specific path).
      loadpaths.select { |load_path| feature.expand_path(load_path).exist? }
               .max_by { |load_path| load_path.to_s.size }
    end
  end

  # Find the common directory containing all specified files, which are
  # given as an array of absolute paths, and use it as the "src" of the output.
  def self.find_src_prefix(files)
    files.inject(files.first.dirname) do |current_root, file|
      next current_root if file.subpath?(exec_prefix)

      current_root.ascend.find do |candidate_root|
        path_from_root = file.relative_path_from(candidate_root)
      rescue ArgumentError
        Ocran.fatal_error "No common directory contains all specified files"
      else
        path_from_root.each_filename.first != ".."
      end
    end
  end

  def self.gem_inclusion_set(spec_name)
    include = [:loaded, :files]
    Ocran.gem_options.each do |negate, option, list|
      next unless list.nil? || list.include?(spec_name)

      case option
      when :minimal
        include = [:loaded]
      when :guess
        include = [:loaded, :files]
      when :all
        include = [:scripts, :files]
      when :full
        include = [:scripts, :files, :extras]
      when :spec
        include = [:spec]
      when :scripts, :files, :extras
        if negate
          include.delete(option)
        else
          include.push(option)
        end
      else
        Ocran.fatal "Invalid Gem content detection option: #{option}"
      end
    end
    include.uniq!
    include
  end

  def Ocran.scanning_gemfile(gemfile_path)
    begin # Preserve indentation to avoid corrupting information used by `git blame`.
      # Load Rubygems and Bundler so we can scan the Gemfile
      ["rubygems", "bundler"].each do |lib|
        begin
          require lib
        rescue LoadError
          Ocran.fatal_error "Couldn't scan Gemfile, unable to load #{lib}"
        end
      end

      ENV["BUNDLE_GEMFILE"] = gemfile_path.to_s
      # Bundler.load.specs includes the spec for Bundler itself (as of Ruby 3.0 and later).
      Bundler.load.specs.each do |spec|
        Ocran.verbose_msg "From Gemfile, adding gem #{spec.full_name}"
      end
    end
  end

  # Fall back to gem detection
  def self.detect_gems_from(features)
    require_relative "../lib/ocran/gem_spec_queryable"

    features.inject([]) do |gems, feature|
      if gems.any? { |spec| feature.subpath?(spec.gem_dir) }
        # Skip if found in known Gem dir
      elsif (spec = GemSpecQueryable.find_spec(feature))
        gems << spec
      else
        Ocran.warn "Failed to load gemspec for #{feature}"
      end

      gems
    end
  end

  # For RubyInstaller environments supporting Ruby 2.4 and above,
  # this method checks for the existence of a required manifest file
  def self.ruby_builtin_manifest
    manifest_path = exec_prefix / "bin/ruby_builtin_dlls/ruby_builtin_dlls.manifest"
    manifest_path.exist? ? manifest_path : nil
  end

  def Ocran.build_exe
    all_load_paths = $LOAD_PATH.map { |loadpath| Pathname(loadpath).expand_path }
    @added_load_paths = ($LOAD_PATH - @load_path_before).map { |loadpath| Pathname(loadpath).expand_path }
    working_directory = Pathname.pwd

    restore_environment

    # If the script was run and autoload is enabled, attempt to autoload libraries.
    if Ocran.force_autoload?
      attempt_load_autoload(@ignore_modules)
    end

    # Store the currently loaded files (before we require rbconfig for
    # our own use).
    features = $LOADED_FEATURES.map { |feature| Pathname(feature) }
    
    # Since https://github.com/rubygems/rubygems/commit/cad4cf16cf8fcc637d9da643ef97cf0be2ed63cb
    # rubygems/core_ext/kernel_require.rb is evaled and thus missing in $LOADED_FEATURES, so we can't find it and need to add it manually
    features.push(Pathname("rubygems/core_ext/kernel_require.rb"))

    # Convert all relative paths to absolute paths before building.
    # NOTE: In the future, different strategies may be needed before and after script execution.
    features = features.filter_map do |feature|
      if feature.absolute?
        feature
      elsif (load_path = find_load_path($LOAD_PATH, feature))
        feature.expand_path(load_path)
      else
        # This message occurs when paths for core library files (e.g., enumerator.so,
        # rational.so, complex.so, fiber.so, thread.rb, ruby2_keywords.rb) are not
        # found. These are integral to Ruby's standard libraries or extensions and
        # may not be located via normal load path searches, especially in RubyInstaller
        # environments.
        Ocran.verbose_msg "Load path not found for #{feature}, skip this feature"
        nil
      end
    end

    # The `RefinePathname` module is prepended to the `Pathname` class. This is done
    # after the user script has finished executing and only the Ocran code is running,
    # to avoid affecting the script environment.
    # Additionally, it is placed here to ensure that the $LOADED_FEATURES variable
    # includes all previously loaded files before the module is required.
    require_relative "../lib/ocran/refine_pathname"
    ::Pathname.prepend(RefinePathname)

    require_relative "../lib/ocran/host_config_helper"
    Ocran.extend HostConfigHelper

    # If a Bundler Gemfile was provided, add all gems it specifies
    if Ocran.gemfile
      Ocran.msg "Scanning Gemfile"
      specs_from_gemfile = Ocran.scanning_gemfile(Ocran.gemfile).to_a
    else
      specs_from_gemfile = []
    end
    # Find gems files and remove them from features
    if defined?(Gem)
      gemfile_gems = specs_from_gemfile.map { |spec| [spec.name, spec] }.to_h
      # Include Gems that are loaded
      loaded_specs = Gem.loaded_specs.values.map { |spec| [spec.name, spec] }.to_h
      # Now, we also detect gems that are not included in Gem.loaded_specs.
      # Therefore, we look for any loaded file from a gem path.
      detected_gems = detect_gems_from(features).map { |spec| [spec.name, spec] }.to_h
      # Prioritize the spec detected from Gemfile.
      gemspecs = detected_gems.merge(loaded_specs).merge(gemfile_gems).values
    else
      gemspecs = []
    end

    direction = proc do |builder|
      Ocran.msg "Building #{Ocran.output_executable}"
      require_relative "../lib/ocran/builder_ops_logger"
      builder.extend(BuilderOpsLogger) if Ocran.verbose?
      require_relative "../lib/ocran/build_helper"
      builder.extend(BuildHelper)

      # Add the ruby executable and DLL
      Ocran.msg "Adding ruby executable #{Ocran.ruby_executable}"
      builder.copy_to_bin(bindir / Ocran.ruby_executable, Ocran.ruby_executable)
      if libruby_so
        builder.copy_to_bin(bindir / libruby_so, libruby_so)
      end

      # Add detected DLLs
      if Ocran.auto_detect_dlls?
        Ocran.detect_dlls.each do |dll|
          Ocran.msg "Adding detected DLL #{dll}"
          if dll.subpath?(exec_prefix)
            builder.duplicate_to_exec_prefix(dll)
          else
            builder.copy_to_bin(dll, dll.basename)
          end
        end
      end

      # Add external manifest files
      [Ocran.ruby_builtin_manifest].compact.each do |manifest|
        Ocran.msg "Adding external manifest #{manifest}"
        builder.duplicate_to_exec_prefix(manifest)
      end

      # Add extra DLLs specified on the command line
      Ocran.extra_dlls.each do |dll|
        Ocran.msg "Adding supplied DLL #{dll}"
        builder.copy_to_bin(bindir / dll, dll)
      end

      # Searches for features that are loaded from gems, then produces a
      # list of files included in those gems' manifests. Also returns a
      # list of original features that caused those gems to be included.
      gem_files = gemspecs.flat_map do |spec|
        spec_file = Pathname(spec.loaded_from)
        # From Ruby 3.2 onwards, launching Ruby with bundle exec causes
        # Bundler's loaded_from to point to the root directory of the
        # bundler gem, not returning the path to gemspec files. Here, we
        # are only collecting gemspec files.
        unless spec_file.file?
          Ocran.warn "Gem #{spec.full_name} root folder was not found, skipping"
          next []
        end

        # Add gemspec files
        if spec_file.subpath?(exec_prefix)
          builder.duplicate_to_exec_prefix(spec_file)
        elsif (gem_path = GemSpecQueryable.find_gem_path(spec_file))
          builder.duplicate_to_gem_home(spec_file, gem_path)
        else
          Ocran.fatal_error "Gem spec #{spec_file} does not exist in the Ruby installation. Don't know where to put it."
        end

        # Determine which set of files to include for this particular gem
        include = Ocran.gem_inclusion_set(spec.name)
        Ocran.msg "Detected gem #{spec.full_name} (#{include.join(", ")})"

        require_relative "../lib/ocran/gem_spec_queryable"
        spec.extend(GemSpecQueryable)

        actual_files = spec.find_gem_files(include, features)
        Ocran.msg "\t#{actual_files.size} files, #{actual_files.sum(0, &:size)} bytes"

        # Decide where to put gem files, either the system gem folder, or
        # GEMHOME.
        actual_files.each do |gemfile|
          if gemfile.subpath?(exec_prefix)
            builder.duplicate_to_exec_prefix(gemfile)
          elsif (gem_path = GemSpecQueryable.find_gem_path(gemfile))
            builder.duplicate_to_gem_home(gemfile, gem_path)
          else
            Ocran.fatal_error "Don't know where to put gemfile #{gemfile}"
          end
        end

        actual_files
      end
      gem_files.uniq!

      features -= gem_files

      # If requested, add all ruby standard libraries
      if Ocran.add_all_core?
        Ocran.msg "Will include all ruby core libraries"
        @load_path_before.each do |lp|
          path = Pathname.new(lp)
          # Match the load path against standard library, site_ruby, and vendor_ruby paths
          path.to_posix.match(RUBY_LIBRARY_PATH_REGEX) do |m|
            subdir = m[1]
            path.find.each do |src|
              next if src.directory?
              builder.copy_to_lib(src, Pathname(subdir) / src.relative_path_from(path))
            end
          end
        end
      end

      # Include encoding support files
      if Ocran.add_all_encoding?
        exec_prefix_load_path = all_load_paths.select { |path| path.subpath?(exec_prefix) }
        exec_prefix_load_path.each do |load_path|
          enc_dir = load_path / "enc"
          next unless enc_dir.directory?

          enc_files = enc_dir.find.select { |path| path.file? && path.extname?(".so") }
          Ocran.msg "Including #{enc_files.size} encoding support files (#{enc_files.sum(0, &:size)} bytes, use --no-enc to exclude)"
          enc_files.each do |path|
            builder.duplicate_to_exec_prefix(path)
          end
        end
      else
        Ocran.msg "Not including encoding support files"
      end

      # Workaround: RubyInstaller cannot find the msys folder if ../msys64/usr/bin/msys-2.0.dll is not present (since RubyInstaller-2.4.1 rubyinstaller 2 issue 23)
      # Add an empty file to /msys64/usr/bin/msys-2.0.dll if the dll was not required otherwise
      builder.touch('msys64/usr/bin/msys-2.0.dll')

      # Find the source root and adjust paths
      source_files = Ocran.source_files.dup
      src_prefix = find_src_prefix(source_files)

      # Find features and decide where to put them in the temporary
      # directory layout.
      src_load_path = []
      # Add loaded libraries (features, gems)
      Ocran.msg "Adding library files"
      features.each do |feature|
        load_path = find_load_path(all_load_paths, feature)
        if load_path.nil? || load_path.expand_path == Pathname.pwd
          source_files << feature
        else
          fullpath = feature.expand_path(load_path)

          if fullpath.subpath?(exec_prefix)
            # Features found in the Ruby installation are put in the
            # temporary Ruby installation.
            builder.duplicate_to_exec_prefix(fullpath)
          elsif (gem_path = GemSpecQueryable.find_gem_path(fullpath))
            # Features found in any other Gem path (e.g. ~/.gems) is put
            # in a special 'gemhome' folder.
            builder.duplicate_to_gem_home(fullpath, gem_path)
          elsif fullpath.subpath?(src_prefix) || load_path == working_directory
            # Any feature found inside the src_prefix automatically gets
            # added as a source file (to go in 'src').
            source_files << fullpath
            # Add the load path unless it was added by the script while
            # running (or we assume that the script can also set it up
            # correctly when running from the resulting executable).
            src_load_path << load_path unless @added_load_paths.include?(load_path)
          elsif @added_load_paths.include?(load_path)
            # Any feature that exist in a load path added by the script
            # itself is added as a file to go into the 'src' (src_prefix
            # will be adjusted below to point to the common parent).
            source_files << fullpath
          else
            # All other feature that can not be resolved go in the the
            # Ruby sitelibdir. This is automatically in the load path
            # when Ruby starts.
            inst_sitelibdir = sitelibdir.relative_path_from(exec_prefix)
            if feature.absolute?
              feature = feature.relative_path_from(load_path.expand_path)
            end
            builder.cp(fullpath, inst_sitelibdir / feature)
          end
        end
      end

      # Recompute the src_prefix. Files may have been added implicitly
      # while scanning through features.
      inst_src_prefix = find_src_prefix(source_files)

      # Add explicitly mentioned files
      Ocran.msg "Adding user-supplied source files"
      target_script = nil
      source_files.each do |file|
        if file.subpath?(exec_prefix)
          target = file.relative_path_from(exec_prefix)
        elsif file.subpath?(inst_src_prefix)
          target = SRCDIR / file.relative_path_from(inst_src_prefix)
        else
          target = SRCDIR / file.basename
        end

        target_script ||= target

        if file.directory?
          builder.mkdir(target)
        elsif file.exist?
          builder.cp(file, target)
        else
          Ocran.fatal_error "The file does not exist (#{file})"
        end
      end

      # Set environment variable

      # FIXME: Remove the absolute path to bundler/setup from RUBYOPT
      # This is a temporary measure to ensure compatibility with self-extracting executables
      # built in a bundle exec environment, particularly for Ruby 3.2 and later where
      # absolute paths are included in RUBYOPT.
      # In the future, we plan to implement a more appropriate solution.
      builder.export("RUBYOPT", Ocran.rubyopt.gsub(%r(-r#{Regexp.escape(RbConfig::TOPDIR)}(/.*/bundler/setup)), ""))
      # Add the load path that are required with the correct path after
      # src_prefix was adjusted.
      load_path = src_load_path.map { |path| SRCDIR / path.relative_path_from(inst_src_prefix) }.uniq
      builder.set_env_path("RUBYLIB", *load_path)
      builder.set_env_path("GEM_PATH", GEMHOMEDIR)

      # Add the opcode to launch the script
      installed_ruby_exe = BINDIR / Ocran.ruby_executable
      builder.exec(installed_ruby_exe, target_script, *Ocran.argv)
    end

    unless Ocran.use_inno_setup?
      require_relative "../lib/ocran/stub_builder"
      StubBuilder.new(Ocran.output_executable,
                      chdir_before: Ocran.chdir_before?,
                      debug_extract: Ocran.enable_debug_extract?,
                      debug_mode: Ocran.enable_debug_mode?,
                      enable_compression: Ocran.enable_compression?,
                      gui_mode: Ocran.windowed?,
                      icon_path: Ocran.icon_filename,
                      &direction)
      Ocran.msg "Finished building #{Ocran.output_executable} (#{Ocran.output_executable.size} bytes)"
    else
      require_relative "../lib/ocran/inno_setup_builder"
      InnoSetupBuilder.new(Ocran.output_executable,
                           Ocran.inno_setup_script,
                           chdir_before: Ocran.chdir_before?,
                           icon_path: Ocran.icon_filename,
                           title: Ocran.output_executable.basename.sub_ext(""),
                           &direction)
      Ocran.msg "Finished building installer file"
    end
  end

  def self.detect_dlls
    require_relative "../lib/ocran/library_detector"
    loaded = LibraryDetector.loaded_dlls
    loaded.map { |s| Pathname.new(s) }.select do |path|
      path.subpath?(exec_prefix) && path.extname?(".dll") && path.basename != libruby_so
    end
  end
end # module Ocran

if File.basename(__FILE__) == File.basename($PROGRAM_NAME)
  Ocran.init

  unless Ocran.script.exist?
    Ocran.fatal_error "#{Ocran.script} was not found!"
  end

  at_exit do
    if $!.nil? or $!.kind_of?(SystemExit)
      Ocran.build_exe
      exit 0
    end
  end

  if Ocran.run_script?
    Ocran.msg "Loading script to check dependencies"
    $PROGRAM_NAME = Ocran.script.to_s
    load Ocran.script
  end
end
